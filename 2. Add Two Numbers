// vs code

import java.util.Arrays;

public class addTwoNumbers {
    public static void main(String args[]) {
        int[] array1 = { 2, 4, 3 };
        int[] array2 = { 5, 6, 4 };

        String[] lastResult = addTwoNum(array1, array2);
        System.out.println(Arrays.toString(lastResult));
    }

    public static String[] addTwoNum(int[] arr1, int[] arr2) {
        int finalNum = 0;
        int arr1Num = 0;
        int arr2Num = 0;

        for (int i = 0; i < arr1.length; i++) {
            arr1Num += arr1[i] * Math.pow(10, i);
        }

        for (int i = 0; i < arr2.length; i++) {
            arr2Num += arr2[i] * Math.pow(10, i);
        }

        finalNum = arr1Num + arr2Num;
        System.out.println(finalNum);
        System.out.println(arr1Num);
        System.out.println(arr2Num);

        String finalNumStr = String.valueOf(finalNum);
        String[] result = new String[finalNumStr.length()];

        for (int i = 0; i < finalNumStr.length(); i++) {
            result[i] = String.valueOf(finalNumStr.charAt(finalNumStr.length() - i - 1));
        }
        return result;

    }

}

//Leetcode

//input
//l1 = [2,4,3], l2 = [5,6,4]

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(0); 
        //--this creates a node dummyHead : [0] -> null
        //                                   ^result pointing to this node
        ListNode tail = dummyHead;
        int carry = 0;

        while (l1 != null || l2 != null || carry != 0) { //if l1 or l2 or carry is not null, then loop 
            int digit1 = (l1 != null) ? l1.val : 0;  // if l1 is not null,digit = l1.val digit1 = 2
            int digit2 = (l2 != null) ? l2.val : 0;                                      //digit2 = 5

            int sum = digit1 + digit2 + carry;    //sum = 2 + 5 = 7
            int digit = sum % 10;                 //digit = 7
            carry = sum / 10;                     //carry = 0

            ListNode newNode = new ListNode(digit); 
            //--this creates a node dummyHead : [7] -> null
            //                                   ^result pointing to this node
            tail.next = newNode;
            //--this sets tail.next to a new node with value 7 : [0] ->  [7] -> null
            //                                                    ^tail   ^tail.next
            tail = tail.next;
            //--this moves result over to '7' node : [0] -> [7] -> null
            //                                               ^tail ^tail.next
            l1 = (l1 != null) ? l1.next : null; //l1 = l1.next = 4
            l2 = (l2 != null) ? l2.next : null; //l1 = l1.next = 6

            //after third iteration, [0] -> [7] -> [0] -> [8] -> null.
        }

        ListNode result = dummyHead.next;
        dummyHead.next = null;
        return result;
    }
}
