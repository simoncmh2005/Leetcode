Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

 

Example 1:

Input: pattern = "abba", s = "dog cat cat dog"
Output: true
Example 2:

Input: pattern = "abba", s = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false
 

Constraints:

1 <= pattern.length <= 300
pattern contains only lower-case English letters.
1 <= s.length <= 3000
s contains only lowercase English letters and spaces ' '.
s does not contain any leading or trailing spaces.
All the words in s are separated by a single space.

class Solution {
    public boolean wordPattern(String pattern, String s) {
        
        char [] ppp = pattern.toCharArray();
        String [] sss = s.split(" ");
       

        Map<Character, Integer> pOcc = new HashMap <Character, Integer> ();
        Map<String, Integer> sOcc = new HashMap <String, Integer> ();

        if(ppp.length!=sss.length){
            return false;
        }

        for(int i =0;i<ppp.length;i++){
            char pString = ppp[i];
            String sString = sss[i];

            if(pOcc.containsKey(pString)&&sOcc.containsKey(sString)){
                if(!pOcc.get(pString).equals(sOcc.get(sString))){
                    return false;
                }
            }else if((!pOcc.containsKey(pString)&&sOcc.containsKey(sString))||
                    (pOcc.containsKey(pString)&&!sOcc.containsKey(sString))){
                    return false;
            }else{
                pOcc.put(pString,i);
                sOcc.put(sString,i);
            }
        }
        return true;
    }
}

like 205. Isomorphic Strings

https://github.com/simoncmh2005/Leetcode/blob/main/205.%20Isomorphic%20Strings
