Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int newArray [] = new int [nums1.length+nums2.length];

        // Copy elements from array1 to mergedArray
        System.arraycopy(nums1, 0, newArray , 0, nums1.length);

        // Copy elements from array2 to mergedArray
        System.arraycopy(nums2, 0, newArray, nums1.length, nums2.length);

        Arrays.sort(newArray);


        if(newArray.length % 2 == 0){
            // int result = ((newArray[newArray.length/2]) + (newArray[newArray.length/2 - 1]))/2;
            int index1 = newArray.length/ 2 - 1;
            int index2 = newArray.length/ 2;
            double result = (newArray[index1]+newArray[index2])/2.0;
            return result;
        }else{
            double result = newArray[newArray.length/2];
            return result;
        }
    }
}
