//leetcode my method

class Solution {
    public int majorityElement(int[] nums) {
        int index = 0;
        int times = nums.length/2;
        int result = 0;
        for (int j = 0;j<nums.length;j++){
            index = 0;
            var thisNum = nums[j]; 
            for(int i = 0;i<nums.length;i++){
                if(nums[i]==thisNum){
                    index++;
                }
                if(index>times){
                    return result = nums[j];
                }
            }
        }
        return result;
    }
}

//sorting 
//to find the mode

class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        return nums[n/2];
    }
}

//hash map

class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < n; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        
        n = n / 2;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > n) {
                return entry.getKey();
            }
        }
        
        return 0;
    }
}
