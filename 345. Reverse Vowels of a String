Given a string s, reverse only all the vowels in the string and return it.

The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.

 

Example 1:

Input: s = "hello"
Output: "holle"
Example 2:

Input: s = "leetcode"
Output: "leotcede"
 

Constraints:

1 <= s.length <= 3 * 105
s consist of printable ASCII characters.

class Solution {
    public String reverseVowels(String s) {

        char[] arr = s.toCharArray(); 
        int left = 0;
        int right = arr.length-1;
        boolean leftOK = false;
        boolean rightOK = false;

        while(left!=right && left < right){
            if(!(arr[left]=='a'||arr[left]=='e'||arr[left]=='i'||arr[left]=='o'||arr[left]=='u'||
            arr[left]=='A'||arr[left]=='E'||arr[left]=='I'||arr[left]=='O'||arr[left]=='U')){
                left++;
            }else{
                leftOK = true;
            }

            if(!(arr[right]=='a'||arr[right]=='e'||arr[right]=='i'||arr[right]=='o'||arr[right]=='u'||
            arr[right]=='A'||arr[right]=='E'||arr[right]=='I'||arr[right]=='O'||arr[right]=='U')){
                right--;
            }else{
                rightOK = true;
            }

            if(leftOK&&rightOK){
                char temp = arr[left];
                arr[left] = arr[right];
                arr[right] = temp;
                leftOK = false;
                rightOK = false;
                left++;
                right--;
            }
        }
        return new String(arr);
    }
}

class Solution {
    public String reverseVowels(String s) {
        char[] word = s.toCharArray();
        int start = 0;
        int end = s.length() - 1;
        String vowels = "aeiouAEIOU";
        
        while (start < end) {
            // Move start pointer until it points to a vowel
            while (start < end && vowels.indexOf(word[start]) == -1) {
                start++;
            }
            
            // Move end pointer until it points to a vowel
            while (start < end && vowels.indexOf(word[end]) == -1) {
                end--;
            }
            
            // Swap the vowels
            char temp = word[start];
            word[start] = word[end];
            word[end] = temp;
            
            // Move the pointers towards each other
            start++;
            end--;
        }
        
        String answer = new String(word);
        return answer;
    }
}
