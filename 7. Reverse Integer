Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
 

Constraints:

-231 <= x <= 231 - 1

class Solution {
    public int reverse(int x) {
        // boolean negative = false;
        // if(x<0){
        //     negative = true;
        // }
        boolean negative = (x < 0) ? true : false;

        if(x == -2147483648){  
            return 0;
        }

        //A 32-bit signed integer. It has a minimum value of -2,147,483,648 and a maximum value of 2,147,483,647 (inclusive).
        //If x = -2147483648, the absolute value is 2147483648, which is not included in the maximum value of 32bit integer.

        x = Math.abs(x);
        //change x from negative to positive

        //x = 45060 output = 06054

        int length = (int) (Math.log10(x));
        //45060's length = 4

        long sum = 0;
        //declare sum is long, if x = 1999999999, the reverse number is 9999999991, int cannot support this number, will cause integer overflow.

        for(int i = length;i>=0;i--){
            long number = 0;
            number = (long)((x / (Math.pow(10, i))) % 10);
            //when i=4, number = 45060/10000 % 10, number = 4
            number = number * (long)((Math.pow(10, length - i)));
            //number = 4 * (math.pow(10,0) = 4 
            sum += number;
        }
        if (sum>2147483647||sum<-2147483648){
            return 0;
        }
        //prevent the number like 9999999991 after reverse

        if (negative){
            sum = sum * (-1);
            return (int)sum;
        }else{
            return (int)sum;
        }
        change it to negative for negative number

    }
}
